Clustering Results Report

Introduction:
Customer segmentation helps businesses understand customer behavior and categorize customers into groups with similar characteristics. In this analysis, we applied clustering techniques to segment customers based on their profiles and transaction history.

Clustering Methodology:
Algorithm Used: K-means clustering
Features Considered:
Customer Profile: CustomerID, Region, SignupDate
Transaction Data: Product categories, quantities, total value spent
Number of Clusters Formed: 3 clusters (You can choose a number between 2 and 10 based on your findings).
Clustering Metrics:
Number of Clusters: We chose 3 clusters based on the results of the K-means algorithm.
Davies-Bouldin Index (DBI): This metric evaluates the compactness and separation of the clusters. A lower value indicates better clustering.
DB Index Value: [Insert calculated value here]
Silhouette Score: This metric measures how similar an object is to its own cluster compared to other clusters. Higher values (closer to 1) indicate better-defined clusters.
Silhouette Score: [Insert calculated value here]
Cluster Centers: The centroids of each cluster, representing the average profile for each segment.
Visual Representation of Clusters:
Using PCA (Principal Component Analysis) to reduce the dimensionality of the data, we visualized the clusters in a 2D plot.

PCA Plot of Clusters: (You can include the PCA plot saved as an image here)

Conclusions:
Clusters: 3 segments of customers were identified, each showing distinct characteristics and spending behavior.
Business Implications: These clusters can be used for targeted marketing, personalized offers, or product recommendations.

Python Code for Clustering:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import davies_bouldin_score
from sklearn.decomposition import PCA
customers = pd.read_csv('C:\\Users\\kaviy\\Downloads\\Customers.csv')
transactions = pd.read_csv('C:\\Users\\kaviy\\Downloads\\Transactions.csv')
transaction_summary = transactions.groupby('CustomerID').agg(
    TotalValue=('TotalValue', 'sum'),
    TransactionCount=('TransactionID', 'count'),
    AverageTransactionValue=('TotalValue', 'mean')
).reset_index()
customer_data = pd.merge(customers, transaction_summary, on='CustomerID', how='left')
(if any)
customer_data.fillna(0, inplace=True)
numerical_features = customer_data[['TotalValue', 'TransactionCount', 'AverageTransactionValue']]
scaler = StandardScaler()
scaled_features = scaler.fit_transform(numerical_features)
db_scores = []
k_range = range(2, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    customer_data[f'Cluster_{k}'] = kmeans.fit_predict(scaled_features)
    db_score = davies_bouldin_score(scaled_features, kmeans.labels_)
    db_scores.append(db_score)
plt.figure(figsize=(8, 6))
plt.plot(k_range, db_scores, marker='o')
plt.title('Davies-Bouldin Index for Different k Values')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('DB Index')
plt.show()
optimal_k = k_range[np.argmin(db_scores)]
kmeans_optimal = KMeans(n_clusters=optimal_k, random_state=42)
customer_data['Cluster'] = kmeans_optimal.fit_predict(scaled_features)
pca = PCA(n_components=2)
pca_components = pca.fit_transform(scaled_features)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=pca_components[:, 0], y=pca_components[:, 1], hue=customer_data['Cluster'], palette='viridis', s=100, edgecolor='black')
plt.title(f'Customer Segmentation with {optimal_k} Clusters')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(title='Cluster')
plt.show()
customer_data.to_csv('Customer_Segmentation.csv', index=False)
print(f"Optimal number of clusters: {optimal_k}")
print(f"DB Index: {db_scores[np.argmin(db_scores)]}")
